{"ast":null,"code":"var _jsxFileName = \"/Users/bryankayne/Documents/display/display/src/components/MainInput.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from \"axios\";\n// import './MainInput.css';\n\n// function MainInput() {\n//     const [currentInput, setCurrentInput] = useState('');\n//     const [nftData, setNftData] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(1);\n//     const [displayNameCount, setDisplayNameCount] = useState(0);\n//     const [descriptionCount, setDescriptionCount] = useState(0);\n\n//     const fetchNftMetadata = async (url) => {\n//         const response = await axios.get(url);\n//         const metadata = response.data;\n\n//         return metadata;\n//     };\n\n//     const addNftToCard = async () => {\n//         const metadata = await fetchNftMetadata(currentInput);\n//         setNftData(prevData => [...prevData, { url: currentInput, metadata }]);\n//         setCurrentInput('');\n//     };\n\n//     return (\n//         <div>\n//             {currentStep === 1 && (\n//                 <>\n//                     <div className=\"input-container\">\n//                         <input \n//                             type=\"text\" \n//                             placeholder=\"Enter NFT URL...\" \n//                             value={currentInput} \n//                             onChange={(e) => setCurrentInput(e.target.value)} \n//                         />\n//                         <button onClick={() => {\n//                             if (nftData.length < 8 && currentInput && !nftData.some(data => data.url === currentInput)) {\n//                                 addNftToCard();\n//                             } else {\n//                                 alert(\"URL already added or input is empty!\");\n//                             }\n//                         }}>\n//                             Add NFT\n//                         </button>\n//                     </div>\n//                     <div className=\"counter\">\n//                         {nftData.length} / 8\n//                     </div>\n//                     <div className=\"url-list\">\n//                         {nftData.map((data, index) => (\n//                             <div key={index} className=\"url-card\">\n//                                 {data.url}\n//                                 {data.metadata && data.metadata.image && (\n//                                     <img src={data.metadata.image} alt=\"NFT\" />\n//                                 )}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <button onClick={() => setCurrentStep(2)}>Next Step</button>\n//                 </>\n//             )}\n\n//             {currentStep === 2 && (\n//                 <>\n//                     <div className=\"input-counter\">\n//                         <input \n//                             placeholder=\"Display Name\"\n//                             maxLength={69} \n//                             onChange={(e) => {\n//                                 setDisplayNameCount(e.target.value.length);\n//                             }}\n//                         />\n//                         <span>{displayNameCount} / 69</span>\n//                     </div>\n\n//                     <div className=\"textarea-counter\">\n//                         <textarea \n//                             placeholder=\"Description (max 420 characters)\" \n//                             maxLength={420} \n//                             onChange={(e) => {\n//                                 setDescriptionCount(e.target.value.length);\n//                             }}\n//                         ></textarea>\n//                         <span>{descriptionCount} / 420</span>\n//                     </div>\n\n//                     {/* ... other details step elements ... */}\n\n//                     <button onClick={() => setCurrentStep(1)}>Previous</button>\n//                 </>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default MainInput;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './MainInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainInput() {\n  _s();\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  async function fetchNftMetadata(url) {\n    try {\n      const match = url.match(/\\/assets\\/ethereum\\/(0x[a-fA-F0-9]{40})\\/(\\d+)/);\n      if (!match) {\n        throw new Error(\"Invalid OpenSea URL.\");\n      }\n      const asset_contract_address = match[1];\n      const token_id = match[2];\n      const apiUrl = `https://api.opensea.io/api/v1/assets?asset_contract_address=${asset_contract_address}&token_id=${token_id}`;\n\n      // Include the API key in the headers\n      const headers = {\n        'X-API-KEY': 'dbfccf66fe42489882e5cd2bb0706944'\n      };\n      const response = await axios.get(apiUrl, {\n        headers: headers\n      });\n      const asset = response.data.assets[0];\n      return {\n        name: asset.name || \"Unnamed NFT\",\n        image: asset.image_url,\n        description: asset.description || \"No description available.\"\n      };\n    } catch (error) {\n      console.error(\"Error fetching NFT metadata:\", error);\n      return null;\n    }\n  }\n  async function addNftToCard() {\n    if (currentInput.trim() === \"\") return;\n    const metadata = await fetchNftMetadata(currentInput);\n    if (metadata) {\n      const newCard = {\n        id: uuidv4(),\n        url: currentInput,\n        name: metadata.name,\n        image: metadata.image,\n        description: metadata.description\n      };\n      setCards(prevCards => [newCard, ...prevCards]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter NFT URL\",\n      value: currentInput,\n      onChange: e => setCurrentInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNftToCard,\n      children: \"Add NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: card.name,\n          style: {\n            width: '100%',\n            maxHeight: '300px',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: card.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"View on OpenSea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n}\n_s(MainInput, \"4L6cKn0MmgnLKpaCcoiNWw583Pk=\");\n_c = MainInput;\nexport default MainInput;\nvar _c;\n$RefreshReg$(_c, \"MainInput\");","map":{"version":3,"names":["React","useState","axios","v4","uuidv4","jsxDEV","_jsxDEV","MainInput","_s","currentInput","setCurrentInput","cards","setCards","fetchNftMetadata","url","match","Error","asset_contract_address","token_id","apiUrl","headers","response","get","asset","data","assets","name","image","image_url","description","error","console","addNftToCard","trim","metadata","newCard","id","prevCards","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","map","card","src","alt","style","width","maxHeight","objectFit","href","rel","_c","$RefreshReg$"],"sources":["/Users/bryankayne/Documents/display/display/src/components/MainInput.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from \"axios\";\n// import './MainInput.css';\n\n// function MainInput() {\n//     const [currentInput, setCurrentInput] = useState('');\n//     const [nftData, setNftData] = useState([]);\n//     const [currentStep, setCurrentStep] = useState(1);\n//     const [displayNameCount, setDisplayNameCount] = useState(0);\n//     const [descriptionCount, setDescriptionCount] = useState(0);\n\n//     const fetchNftMetadata = async (url) => {\n//         const response = await axios.get(url);\n//         const metadata = response.data;\n\n//         return metadata;\n//     };\n\n//     const addNftToCard = async () => {\n//         const metadata = await fetchNftMetadata(currentInput);\n//         setNftData(prevData => [...prevData, { url: currentInput, metadata }]);\n//         setCurrentInput('');\n//     };\n\n//     return (\n//         <div>\n//             {currentStep === 1 && (\n//                 <>\n//                     <div className=\"input-container\">\n//                         <input \n//                             type=\"text\" \n//                             placeholder=\"Enter NFT URL...\" \n//                             value={currentInput} \n//                             onChange={(e) => setCurrentInput(e.target.value)} \n//                         />\n//                         <button onClick={() => {\n//                             if (nftData.length < 8 && currentInput && !nftData.some(data => data.url === currentInput)) {\n//                                 addNftToCard();\n//                             } else {\n//                                 alert(\"URL already added or input is empty!\");\n//                             }\n//                         }}>\n//                             Add NFT\n//                         </button>\n//                     </div>\n//                     <div className=\"counter\">\n//                         {nftData.length} / 8\n//                     </div>\n//                     <div className=\"url-list\">\n//                         {nftData.map((data, index) => (\n//                             <div key={index} className=\"url-card\">\n//                                 {data.url}\n//                                 {data.metadata && data.metadata.image && (\n//                                     <img src={data.metadata.image} alt=\"NFT\" />\n//                                 )}\n//                             </div>\n//                         ))}\n//                     </div>\n//                     <button onClick={() => setCurrentStep(2)}>Next Step</button>\n//                 </>\n//             )}\n\n//             {currentStep === 2 && (\n//                 <>\n//                     <div className=\"input-counter\">\n//                         <input \n//                             placeholder=\"Display Name\"\n//                             maxLength={69} \n//                             onChange={(e) => {\n//                                 setDisplayNameCount(e.target.value.length);\n//                             }}\n//                         />\n//                         <span>{displayNameCount} / 69</span>\n//                     </div>\n\n//                     <div className=\"textarea-counter\">\n//                         <textarea \n//                             placeholder=\"Description (max 420 characters)\" \n//                             maxLength={420} \n//                             onChange={(e) => {\n//                                 setDescriptionCount(e.target.value.length);\n//                             }}\n//                         ></textarea>\n//                         <span>{descriptionCount} / 420</span>\n//                     </div>\n                    \n//                     {/* ... other details step elements ... */}\n\n//                     <button onClick={() => setCurrentStep(1)}>Previous</button>\n//                 </>\n//             )}\n//         </div>\n//     );\n// }\n\n// export default MainInput;\n\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './MainInput.css';\n\n\nfunction MainInput() {\n    const [currentInput, setCurrentInput] = useState(\"\");\n    const [cards, setCards] = useState([]);\n\n    async function fetchNftMetadata(url) {\n        try {\n            const match = url.match(/\\/assets\\/ethereum\\/(0x[a-fA-F0-9]{40})\\/(\\d+)/);\n            if (!match) {\n                throw new Error(\"Invalid OpenSea URL.\");\n            }\n    \n            const asset_contract_address = match[1];\n            const token_id = match[2];\n            const apiUrl = `https://api.opensea.io/api/v1/assets?asset_contract_address=${asset_contract_address}&token_id=${token_id}`;\n    \n            // Include the API key in the headers\n            const headers = {\n                'X-API-KEY': 'dbfccf66fe42489882e5cd2bb0706944'\n            };\n    \n            const response = await axios.get(apiUrl, { headers: headers });\n            const asset = response.data.assets[0];\n    \n            return {\n                name: asset.name || \"Unnamed NFT\",\n                image: asset.image_url,\n                description: asset.description || \"No description available.\"\n            };\n        } catch (error) {\n            console.error(\"Error fetching NFT metadata:\", error);\n            return null;\n        }\n    }\n    \n\n    async function addNftToCard() {\n        if (currentInput.trim() === \"\") return;\n        const metadata = await fetchNftMetadata(currentInput);\n        if (metadata) {\n            const newCard = {\n                id: uuidv4(),\n                url: currentInput,\n                name: metadata.name,\n                image: metadata.image,\n                description: metadata.description\n            };\n            setCards((prevCards) => [newCard, ...prevCards]);\n        }\n    }\n\n    return (\n        <div>\n            <input \n                type=\"text\"\n                placeholder=\"Enter NFT URL\"\n                value={currentInput}\n                onChange={(e) => setCurrentInput(e.target.value)}\n            />\n            <button onClick={addNftToCard}>Add NFT</button>\n            <div className=\"cards\">\n                {cards.map((card) => (\n                    <div key={card.id} className=\"card\">\n                        <img src={card.image} alt={card.name} style={{ width: '100%', maxHeight: '300px', objectFit: 'contain' }} />\n                        <h3>{card.name}</h3>\n                        <p>{card.description}</p>\n                        <a href={card.url} target=\"_blank\" rel=\"noopener noreferrer\">View on OpenSea</a>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MainInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}