{"ast":null,"code":"var _jsxFileName = \"/Users/bryankayne/Documents/display/display/src/components/MainInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './MainInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainInput() {\n  _s();\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  async function fetchNftMetadata(url) {\n    try {\n      const match = url.match(/\\/assets\\/(arbitrum|ethereum)\\/(0x[a-fA-F0-9]{40})\\/(\\d+)/);\n      if (!match) {\n        throw new Error(\"Invalid OpenSea URL.\");\n      }\n      const chain = match[1];\n      const address = match[2];\n      const identifier = match[3];\n      const apiUrl = `https://api.opensea.io/api/v2/chain/${chain}/contract/${address}/nfts/${identifier}`;\n      const headers = {\n        'X-API-KEY': 'dbfccf66fe42489882e5cd2bb0706944'\n      };\n      const response = await axios.get(apiUrl, {\n        headers: headers\n      });\n\n      // Parse the details from the response\n      const asset = response.data.nft;\n      const name = asset.name || \"Unnamed NFT\";\n      const imageUrl = asset.image_url || \"\";\n      const description = asset.description || \"No description available.\";\n      return {\n        name: name,\n        image: imageUrl,\n        description: description\n      };\n    } catch (error) {\n      console.error(\"Error fetching NFT metadata:\", error);\n      return null;\n    }\n  }\n  async function addNftToCard() {\n    if (currentInput.trim() === \"\") return;\n    const metadata = await fetchNftMetadata(currentInput);\n    if (metadata) {\n      const newCard = {\n        id: uuidv4(),\n        url: currentInput,\n        name: metadata.name,\n        image: metadata.image,\n        description: metadata.description\n      };\n      setCards(prevCards => [newCard, ...prevCards]);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter NFT URL\",\n      value: currentInput,\n      onChange: e => setCurrentInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNftToCard,\n      children: \"Add NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: card.name,\n          style: {\n            width: '100%',\n            maxHeight: '300px',\n            objectFit: 'contain'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: card.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: card.url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"View on OpenSea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(MainInput, \"4L6cKn0MmgnLKpaCcoiNWw583Pk=\");\n_c = MainInput;\nexport default MainInput;\nvar _c;\n$RefreshReg$(_c, \"MainInput\");","map":{"version":3,"names":["React","useState","axios","v4","uuidv4","jsxDEV","_jsxDEV","MainInput","_s","currentInput","setCurrentInput","cards","setCards","fetchNftMetadata","url","match","Error","chain","address","identifier","apiUrl","headers","response","get","asset","data","nft","name","imageUrl","image_url","description","image","error","console","addNftToCard","trim","metadata","newCard","id","prevCards","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","map","card","src","alt","style","width","maxHeight","objectFit","href","rel","_c","$RefreshReg$"],"sources":["/Users/bryankayne/Documents/display/display/src/components/MainInput.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { v4 as uuidv4 } from 'uuid';\nimport './MainInput.css';\n\nfunction MainInput() {\n    const [currentInput, setCurrentInput] = useState(\"\");\n    const [cards, setCards] = useState([]);\n\n    async function fetchNftMetadata(url) {\n        try {\n            const match = url.match(/\\/assets\\/(arbitrum|ethereum)\\/(0x[a-fA-F0-9]{40})\\/(\\d+)/);\n            if (!match) {\n                throw new Error(\"Invalid OpenSea URL.\");\n            }\n    \n            const chain = match[1];\n            const address = match[2];\n            const identifier = match[3];\n            const apiUrl = `https://api.opensea.io/api/v2/chain/${chain}/contract/${address}/nfts/${identifier}`;\n    \n            const headers = {\n                'X-API-KEY': 'dbfccf66fe42489882e5cd2bb0706944'\n            };\n    \n            const response = await axios.get(apiUrl, { headers: headers });\n            \n            // Parse the details from the response\n            const asset = response.data.nft;\n            const name = asset.name || \"Unnamed NFT\";\n            const imageUrl = asset.image_url || \"\";\n            const description = asset.description || \"No description available.\";\n    \n            return {\n                name: name,\n                image: imageUrl,\n                description: description\n            };\n        } catch (error) {\n            console.error(\"Error fetching NFT metadata:\", error);\n            return null;\n        }\n    }\n    \n    \n\n    async function addNftToCard() {\n        if (currentInput.trim() === \"\") return;\n        const metadata = await fetchNftMetadata(currentInput);\n        if (metadata) {\n            const newCard = {\n                id: uuidv4(),\n                url: currentInput,\n                name: metadata.name,\n                image: metadata.image,\n                description: metadata.description\n            };\n            setCards((prevCards) => [newCard, ...prevCards]);\n        }\n    }\n\n    return (\n        <div>\n            <input \n                type=\"text\"\n                placeholder=\"Enter NFT URL\"\n                value={currentInput}\n                onChange={(e) => setCurrentInput(e.target.value)}\n            />\n            <button onClick={addNftToCard}>Add NFT</button>\n            <div className=\"cards\">\n                {cards.map((card) => (\n                    <div key={card.id} className=\"card\">\n                        <img src={card.image} alt={card.name} style={{ width: '100%', maxHeight: '300px', objectFit: 'contain' }} />\n                        <h3>{card.name}</h3>\n                        <p>{card.description}</p>\n                        <a href={card.url} target=\"_blank\" rel=\"noopener noreferrer\">View on OpenSea</a>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default MainInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}